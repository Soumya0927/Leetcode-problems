class Solution {
    int digitSum(int n) {
        int temp = n;
        int sum = 0;
        while (temp > 0) {
            sum += temp % 10;
            temp = temp / 10;
        }
        return sum;
    }

public:
    int maximumSum(vector<int>& nums) {
        int n = nums.size();
        vector<pair<int, int>> digitSumPairs;
        for (int number : nums) {
            int Sum = digitSum(number);
            digitSumPairs.push_back({Sum, number});
        }
        sort(digitSumPairs.begin(), digitSumPairs.end());

        int maxi = -1;
        for (int i = 1; i < digitSumPairs.size(); i++) {
            int curr = digitSumPairs[i].first;
            int prev = digitSumPairs[i - 1].first;
            if (curr == prev) {
                int currentSum =
                    digitSumPairs[i].second + digitSumPairs[i - 1].second;
                maxi = max(maxi, currentSum);
            }
        }
        return maxi;
    }
};
